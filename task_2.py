# -*- coding: utf-8 -*-
"""Welcome to Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb

# New section
"""

# INSTALL AND IMPORT REQUIRED LIBRARIES
!pip install -q pandas matplotlib seaborn wbgapi

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import wbgapi as wb

print("‚úÖ Libraries installed successfully!")

# FETCH AND VISUALIZE POPULATION DATA
def get_population_data():
    """Fetch population data from World Bank API"""
    try:
        print("‚è≥ Downloading data...")
        df = wb.data.DataFrame(
            'SP.POP.TOTL',  # Total population indicator
            time=range(2010, 2023),  # Last 13 years
            labels=True
        ).reset_index()

        # Clean and reshape data
        df = df.melt(
            id_vars=['economy', 'country'],
            var_name='year',
            value_name='population'
        )
        df['year'] = df['year'].str.replace('YR', '').astype(int)
        return df.dropna()

    except Exception as e:
        print(f"‚ùå Error fetching data: {e}")
        return None

def create_visualizations(df):
    """Create bar chart and histogram"""
    plt.figure(figsize=(15, 5))

    # 1. Bar Chart (Latest Year)
    plt.subplot(1, 2, 1)
    latest = df[df['year'] == df['year'].max()]
    top_10 = latest.nlargest(10, 'population')
    sns.barplot(
        data=top_10,
        x='population',
        y='country',
        palette='viridis'
    )
    plt.title(f'Top 10 Countries by Population ({df["year"].max()})')
    plt.xlabel('Population (billions)')

    # 2. Histogram (Global Distribution)
    plt.subplot(1, 2, 2)
    sns.histplot(
        data=df,
        x='population',
        bins=20,
        kde=True,
        color='skyblue'
    )
    plt.title('Global Population Distribution')
    plt.xlabel('Population (log scale)')
    plt.xscale('log')

    plt.tight_layout()
    plt.show()

# Execute the analysis
if __name__ == "__main__":
    pop_data = get_population_data()
    if pop_data is not None:
        print("\nüìã Sample Data (2022 values):")
        display(pop_data[pop_data['year'] == 2022].head())
        create_visualizations(pop_data)

# FETCH AND VISUALIZE POPULATION DATA (FIXED VERSION)
def get_population_data():
    """Fetch population data from World Bank API with proper error handling"""
    try:
        print("‚è≥ Downloading data from World Bank...")
        # Fetch data with explicit column selection
        df = wb.data.DataFrame(
            'SP.POP.TOTL',
            time=range(2020, 2023),  # Last 3 years for faster loading
            labels=True,
            columns=['series', 'economy', 'time', 'value']
        ).reset_index()

        # Rename columns for clarity
        df = df.rename(columns={
            'economy': 'country',
            'time': 'year',
            'value': 'population'
        })

        # Clean year format and convert population to numeric
        df['year'] = df['year'].str.replace('YR', '').astype(int)
        df['population'] = pd.to_numeric(df['population'], errors='coerce')

        return df.dropna()

    except Exception as e:
        print(f"‚ùå Error fetching data: {str(e)}")
        return None

def create_visualizations(df):
    """Create professional visualizations"""
    if df is None:
        return

    plt.figure(figsize=(16, 6))

    # 1. Bar Chart (Latest Year)
    plt.subplot(1, 2, 1)
    latest_year = df['year'].max()
    latest_data = df[df['year'] == latest_year]
    top_10 = latest_data.nlargest(10, 'population')

    bar = sns.barplot(
        data=top_10,
        x='population',
        y='country',
        palette='rocket'
    )

    # Format population in billions
    bar.set_xticklabels([f"{x/1e9:.1f}B" for x in bar.get_xticks()])
    plt.title(f'Top 10 Countries by Population ({latest_year})', pad=20)
    plt.xlabel('Population')
    plt.ylabel('')

    # 2. Histogram (Global Distribution)
    plt.subplot(1, 2, 2)
    hist = sns.histplot(
        data=df,
        x='population',
        bins=30,
        kde=True,
        color='#2ecc71'
    )
    plt.title('Global Population Distribution', pad=20)
    plt.xlabel('Population (log scale)')
    plt.xscale('log')
    plt.ylabel('Number of Countries')

    plt.tight_layout()
    plt.show()

# Execute the analysis
if __name__ == "__main__":
    pop_data = get_population_data()
    if pop_data is not None:
        print("\nüìã Sample Data (Latest Year):")
        display(pop_data[pop_data['year'] == pop_data['year'].max()].head(3))

        print(f"\nüìä Dataset contains {len(pop_data)} records")
        print(f"üåç Countries: {pop_data['country'].nunique()}")
        print(f"üìÖ Years: {sorted(pop_data['year'].unique())}")

        create_visualizations(pop_data)

# FETCH AND VISUALIZE POPULATION DATA (FULLY WORKING VERSION)
def get_population_data():
    """Fetch and clean population data with complete error handling"""
    try:
        print("‚è≥ Downloading latest data from World Bank...")

        # Fetch data with explicit parameters
        data = wb.data.DataFrame(
            'SP.POP.TOTL',
            economy=wb.region.members('WLD'),  # All countries
            time=range(2020, 2024),  # Recent years
            skipBlanks=True,
            labels=True
        )

        # Transform the data structure
        df = data.reset_index().melt(
            id_vars=['economy', 'Country'],
            var_name='year',
            value_name='population'
        )

        # Clean and format columns
        df = df.rename(columns={'economy': 'country_code', 'Country': 'country'})
        df['year'] = df['year'].str.extract('(\d+)')[0].astype(int)
        df['population'] = pd.to_numeric(df['population'], errors='coerce')

        return df.dropna().sort_values(['year', 'population'], ascending=[False, False])

    except Exception as e:
        print(f"‚ùå Critical error: {str(e)}")
        print("‚ö†Ô∏è Tip: Check if wbgapi needs updating: !pip install --upgrade wbgapi")
        return None

def create_visualizations(df):
    """Generate publication-quality visualizations"""
    if df is None or df.empty:
        print("No data available for visualization")
        return

    plt.figure(figsize=(18, 7))
    plt.suptitle('World Population Analysis', y=1.05, fontsize=16, fontweight='bold')

    # 1. Top Countries Bar Chart
    plt.subplot(1, 2, 1)
    latest = df[df['year'] == df['year'].max()]
    top_15 = latest.nlargest(15, 'population')

    ax1 = sns.barplot(
        data=top_15,
        x='population',
        y='country',
        palette='plasma',
        estimator=sum,
        ci=None
    )

    # Format x-axis in billions
    ax1.set_xticks([x*1e9 for x in range(0, 16, 2)])
    ax1.set_xticklabels([f"{x}B" for x in range(0, 16, 2)])
    plt.title(f'Top 15 Countries ({df["year"].max()})', pad=15)
    plt.xlabel('Population (Billions)')
    plt.ylabel('')

    # 2. Population Distribution Histogram
    plt.subplot(1, 2, 2)
    ax2 = sns.histplot(
        data=df,
        x='population',
        bins=50,
        kde=True,
        color='#3498db',
        log_scale=True
    )

    # Formatting
    ax2.set_xlabel('Population (Log Scale)')
    ax2.set_ylabel('Country Count')
    ax2.set_title('Global Population Distribution', pad=15)
    plt.grid(True, which='both', ls='--', alpha=0.3)

    plt.tight_layout()
    plt.show()

# Execute with comprehensive checks
if __name__ == "__main__":
    print("üöÄ Starting analysis...")
    pop_data = get_population_data()

    if pop_data is not None and not pop_data.empty:
        print(f"\n‚úÖ Data loaded successfully ({len(pop_data)} records)")
        print(f"üåç Countries: {pop_data['country'].nunique()}")
        print(f"üìÖ Years: {sorted(pop_data['year'].unique())}")

        print("\nüìã Latest Year Sample:")
        display(pop_data[pop_data['year'] == pop_data['year'].max()].head(5))

        create_visualizations(pop_data)
    else:
        print("‚ùå Failed to load data. Please check your internet connection and try again.")
        print("üí° Try updating wbgapi: !pip install --upgrade wbgapi")

# INSTALL AND IMPORT REQUIRED LIBRARIES
!pip install -q pandas numpy matplotlib seaborn plotly

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.impute import SimpleImputer

print("‚úÖ Libraries installed successfully!")

# TITANIC DATA CLEANING AND EDA
def load_titanic_data():
    """Load Titanic dataset from Kaggle with error handling"""
    try:
        # Download dataset (upload kaggle.json first)
        from google.colab import files
        files.upload()
        !mkdir -p ~/.kaggle
        !cp kaggle.json ~/.kaggle/
        !chmod 600 ~/.kaggle/kaggle.json
        !kaggle competitions download -c titanic
        !unzip titanic.zip

        # Load data
        train = pd.read_csv('train.csv')
        test = pd.read_csv('test.csv')
        return train, test
    except Exception as e:
        print(f"‚ùå Error loading data: {str(e)}")
        print("‚ÑπÔ∏è Please upload kaggle.json and ensure internet connection")
        return None, None

def clean_data(df):
    """Perform comprehensive data cleaning"""
    # Handle missing values
    df['Age'] = df['Age'].fillna(df['Age'].median())
    df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])
    df['Fare'] = df['Fare'].fillna(df['Fare'].median())

    # Feature engineering
    df['FamilySize'] = df['SibSp'] + df['Parch'] + 1
    df['IsAlone'] = (df['FamilySize'] == 1).astype(int)
    df['Title'] = df['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)
    df['Title'] = df['Title'].replace(['Lady', 'Countess','Capt', 'Col', 'Don',
                                     'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')
    df['Title'] = df['Title'].replace('Mlle', 'Miss')
    df['Title'] = df['Title'].replace('Ms', 'Miss')
    df['Title'] = df['Title'].replace('Mme', 'Mrs')

    # Convert categorical features
    df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})
    df = pd.get_dummies(df, columns=['Embarked', 'Title'], drop_first=True)

    # Drop unnecessary columns
    df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)

    return df

def perform_eda(df):
    """Perform comprehensive exploratory data analysis"""
    # 1. Basic Statistics
    print("üìä Basic Statistics:")
    display(df.describe())

    # 2. Survival Rate Analysis
    plt.figure(figsize=(18, 12))

    # Subplot 1: Survival by Class
    plt.subplot(2, 3, 1)
    sns.barplot(x='Pclass', y='Survived', data=df, palette='viridis')
    plt.title('Survival Rate by Passenger Class')

    # Subplot 2: Survival by Sex
    plt.subplot(2, 3, 2)
    sns.barplot(x='Sex', y='Survived', data=df, palette='magma')
    plt.title('Survival Rate by Gender')

    # Subplot 3: Age Distribution
    plt.subplot(2, 3, 3)
    sns.histplot(data=df, x='Age', hue='Survived', bins=30, kde=True, palette='coolwarm')
    plt.title('Age Distribution by Survival')

    # Subplot 4: Fare Distribution
    plt.subplot(2, 3, 4)
    sns.boxplot(x='Survived', y='Fare', data=df, palette='Set2')
    plt.yscale('log')
    plt.title('Fare Distribution by Survival (Log Scale)')

    # Subplot 5: Family Size Impact
    plt.subplot(2, 3, 5)
    sns.pointplot(x='FamilySize', y='Survived', data=df, color='red')
    plt.title('Survival Rate by Family Size')

    # Subplot 6: Embarked Port
    if 'Embarked_Q' in df.columns:
        embarked = df[['Embarked_Q', 'Embarked_S', 'Survived']].melt(id_vars='Survived')
        plt.subplot(2, 3, 6)
        sns.barplot(x='variable', y='value', hue='Survived', data=embarked)
        plt.title('Survival by Embarked Port')

    plt.tight_layout()
    plt.show()

    # 3. Correlation Analysis
    plt.figure(figsize=(10, 8))
    sns.heatmap(df.corr(), annot=True, cmap='coolwarm', center=0)
    plt.title('Feature Correlation Matrix')
    plt.show()

    # 4. Interactive Age vs Fare Plot
    fig = px.scatter(df, x='Age', y='Fare', color='Survived',
                     hover_data=['Pclass', 'Sex', 'FamilySize'],
                     title='Age vs Fare by Survival Status')
    fig.show()

# Main Execution
if __name__ == "__main__":
    # Load data
    train_df, test_df = load_titanic_data()

    if train_df is not None:
        print("‚úÖ Data loaded successfully!")
        print(f"Train shape: {train_df.shape}")
        print(f"Test shape: {test_df.shape if test_df is not None else 'N/A'}")

        # Clean data
        train_clean = clean_data(train_df.copy())

        # Perform EDA
        print("\nüîç Exploratory Data Analysis Results:")
        perform_eda(train_clean)

        # Show cleaned data sample
        print("\nüßπ Cleaned Data Sample:")
        display(train_clean.head())

# INSTALL AND IMPORT REQUIRED LIBRARIES
!pip install -q pandas numpy matplotlib seaborn plotly

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.impute import SimpleImputer

print("‚úÖ Libraries installed successfully!")

# TITANIC DATA CLEANING AND EDA (NO KAGGLE API NEEDED)
def load_titanic_data():
    """Load Titanic dataset from direct download link"""
    try:
        # Download dataset from GitHub
        train_url = 'https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv'
        train_df = pd.read_csv(train_url)

        # Create test features for demonstration (since test.csv isn't available)
        test_df = train_df.sample(frac=0.2, random_state=42)
        train_df = train_df.drop(test_df.index)

        return train_df, test_df
    except Exception as e:
        print(f"‚ùå Error loading data: {str(e)}")
        print("‚ÑπÔ∏è Please check your internet connection")
        return None, None

def clean_data(df):
    """Perform comprehensive data cleaning"""
    # Create copy to avoid SettingWithCopyWarning
    df = df.copy()

    # Handle missing values
    df['Age'] = df['Age'].fillna(df['Age'].median())
    df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])
    df['Fare'] = df['Fare'].fillna(df['Fare'].median())

    # Feature engineering
    df['FamilySize'] = df['SibSp'] + df['Parch'] + 1
    df['IsAlone'] = (df['FamilySize'] == 1).astype(int)
    df['Title'] = df['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)
    df['Title'] = df['Title'].replace(['Lady', 'Countess','Capt', 'Col', 'Don',
                                     'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')
    df['Title'] = df['Title'].replace('Mlle', 'Miss')
    df['Title'] = df['Title'].replace('Ms', 'Miss')
    df['Title'] = df['Title'].replace('Mme', 'Mrs')

    # Convert categorical features
    df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})
    df = pd.get_dummies(df, columns=['Embarked', 'Title'], drop_first=True)

    # Drop unnecessary columns
    df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)

    return df

def perform_eda(df):
    """Perform comprehensive exploratory data analysis"""
    # 1. Basic Statistics
    print("üìä Basic Statistics:")
    display(df.describe())

    # 2. Survival Rate Analysis
    plt.figure(figsize=(18, 12))

    # Subplot 1: Survival by Class
    plt.subplot(2, 3, 1)
    sns.barplot(x='Pclass', y='Survived', data=df, palette='viridis')
    plt.title('Survival Rate by Passenger Class')

    # Subplot 2: Survival by Sex
    plt.subplot(2, 3, 2)
    sns.barplot(x='Sex', y='Survived', data=df, palette='magma')
    plt.title('Survival Rate by Gender')

    # Subplot 3: Age Distribution
    plt.subplot(2, 3, 3)
    sns.histplot(data=df, x='Age', hue='Survived', bins=30, kde=True, palette='coolwarm')
    plt.title('Age Distribution by Survival')

    # Subplot 4: Fare Distribution
    plt.subplot(2, 3, 4)
    sns.boxplot(x='Survived', y='Fare', data=df, palette='Set2')
    plt.yscale('log')
    plt.title('Fare Distribution by Survival (Log Scale)')

    # Subplot 5: Family Size Impact
    plt.subplot(2, 3, 5)
    sns.pointplot(x='FamilySize', y='Survived', data=df, color='red')
    plt.title('Survival Rate by Family Size')

    # Subplot 6: Embarked Port
    if 'Embarked_Q' in df.columns:
        embarked = df[['Embarked_Q', 'Embarked_S', 'Survived']].melt(id_vars='Survived')
        plt.subplot(2, 3, 6)
        sns.barplot(x='variable', y='value', hue='Survived', data=embarked)
        plt.title('Survival by Embarked Port')

    plt.tight_layout()
    plt.show()

    # 3. Correlation Analysis
    plt.figure(figsize=(10, 8))
    sns.heatmap(df.corr(), annot=True, cmap='coolwarm', center=0)
    plt.title('Feature Correlation Matrix')
    plt.show()

    # 4. Interactive Age vs Fare Plot
    fig = px.scatter(df, x='Age', y='Fare', color='Survived',
                     hover_data=['Pclass', 'Sex', 'FamilySize'],
                     title='Age vs Fare by Survival Status')
    fig.show()

# Main Execution
if __name__ == "__main__":
    # Load data
    train_df, test_df = load_titanic_data()

    if train_df is not None:
        print("‚úÖ Data loaded successfully!")
        print(f"Train shape: {train_df.shape}")
        print(f"Test shape: {test_df.shape if test_df is not None else 'N/A'}")

        # Clean data
        train_clean = clean_data(train_df)

        # Perform EDA
        print("\nüîç Exploratory Data Analysis Results:")
        perform_eda(train_clean)

        # Show cleaned data sample
        print("\nüßπ Cleaned Data Sample:")
        display(train_clean.head())